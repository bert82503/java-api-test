package leet.code.bit;

/**
 * 136. 只出现一次的数字
 * <p></p>
 * https://leetcode-cn.com/problems/single-number/
 * <pre>
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。
 * 找出那个只出现了一次的元素。
 *
 * 说明：
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 * </pre>
 *
 * @author guangyi
 */
public class SingleNumber {

    /**
     * 只出现一次的数字
     * https://leetcode-cn.com/problems/single-number/solution/zhi-chu-xian-yi-ci-de-shu-zi-by-leetcode-solution/
     * <pre>
     * 方法一：位运算
     * 如果不考虑时间复杂度和空间复杂度的限制，这道题有很多种解法，可能的解法有如下几种。
     * * 使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，
     *   如果集合中已经有该数字，则将该数字从集合中删除，最后剩下的数字就是只出现一次的数字。
     * * 使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表，最后遍历哈希表，得到只出现一次的数字。
     * * 使用集合存储数组中出现的所有数字，并计算数组中的元素之和。
     *   由于集合保证元素无重复，因此计算集合中的所有元素之和的两倍，即为每个元素出现两次的情况下的元素之和。
     *   由于数组中只有一个元素出现一次，其余元素都出现两次，
     *   因此用集合中的元素之和的两倍减去数组中的元素之和，剩下的数就是数组中只出现一次的数字。
     * 上述三种解法都需要额外使用 O(n)O(n) 的空间，其中 nn 是数组长度。
     *
     * 如何才能做到线性时间复杂度和常数空间复杂度呢？
     * 答案是使用位运算。
     * 对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。
     * 1. 任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0 = a。
     * 2. 任何数和其自身做异或运算，结果是 0，即 a ⊕ a = 0。
     * 3. 异或运算满足交换律和结合律，即 a ⊕ b ⊕ a = b ⊕ a ⊕ a = b ⊕ (a ⊕ a) = b ⊕ 0 = b。
     *
     * 根据性质 2 和性质 1，上式可化简和计算得到如下结果：
     * 因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字。
     * </pre>
     *
     * 学算法，结果相对于过程不那么重要
     * https://leetcode-cn.com/problems/single-number/solution/xue-suan-fa-jie-guo-xiang-dui-yu-guo-cheng-bu-na-y/
     * <pre>
     * 大脑的思考过程
     * 这题拿到手，第一反应是用hash表，没有思考细节，只是觉得hash表肯定是可以搞定的，但是空间复杂度是 O(n)，不满足题意。
     *
     * 接着开始思考，如何才能做到空间复杂度是 O(1) 呢？脑袋开始疯狂打转，但没有思路。没办法，退回原点。
     *
     * 心想，如果使用暴力破解法，该如何解决，很简单：每次从数组中取一个数，记为cur，
     * 然后从剩下的数中查找，如果找不到，则cur即为要找的那个数。这种解法时间复杂度是 O(n^2)。
     * 继续思考，如何再继续降低复杂度呢？ 想到了排序 ！！！
     *
     * 再继续思考，如何能把时间复杂度降到 O(n)，有两个突破点：
     * 1. 暴力解法做了很多重复的工作
     * 2. 要充分利用题目的已有信息
     *
     * 通过第二点，我还真找到突破口。反复看了好几篇题目，找到了一个很重要的信息：除了某个元素只出现一次以外，其余每个元素均出现两次。
     * 觉得这是个突破口！！！！——异或运算！
     *
     * 解法四：异或
     *
     * 心得
     * 善于挖掘题目中的已有信息！！！！
     * </pre>
     */
    public static int singleNumber(int[] nums) {
        // 出现一次的数字 x
        int x = 0;
        for (int num : nums) {
            // 异或运算
            x ^= num;
        }
        return x;
    }
}
